//================================================================================================================
//  *   Chapther
//================================================================================================================
//  *   CH01 - Mixin generate font family
//  *   CH02 - Mixin element positioning
//  *   CH03 - Mixin centered position of an element in a short 2 lines of code
//  *   CH04 - Mixin converting font size from px to rem
//  *   CH05 - Mixin converting line height from px to rem
//  *   CH06 - Mixin generates the image in either standard size or retina display version
//  *   CH07 - Mixin clearfix
//  *   CH08 - Mixin CSS triangle
//  *   CH09 - Extend embed video
//  *   CH10 - Mixin Flex
//  *   CH11 - Mixin Spacing
//  *   CH12 - Mixin Fluid Font Size
//  *   CH13 - Mixin Heading
//  *   CH14 - Mixin Truncate Text



//================================================================================================================
//  *   CH01 - Mixin generate font family
//================================================================================================================
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
    @font-face {
        font-family: quote($font-name);
        src: url($file-name + '.eot');
        src: url($file-name + '.eot?#iefix') format('embedded-opentype'),
        url($file-name + '.woff') format('woff'),
        url($file-name + '.ttf') format('truetype'),
        url($file-name + '.svg##{$font-name}') format('svg');
        font-weight: $weight;
        font-style: $style;
        font-display: swap;
    }
}

// Usage
// @include font-face('font-name', '../fonts/font-folder/font-name', $style: normal, $weight: normal);



//================================================================================================================
//  *   CH02 - Mixin element positioning
//================================================================================================================
@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);
        @if $i and $i + 1 <=length($args) and type-of(nth($args, $i + 1))==number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

// Positioning helpers
@mixin absolute($args: '') {
    @include position(absolute, $args);
}

@mixin fixed($args: '') {
    @include position(fixed, $args);
}

@mixin relative($args: '') {
    @include position(relative, $args);
}

// usage
.my-box {
    @include relative();
}

.my-box-2 {
    @include absolute(top 100% left 0);
}

.my-box-3 {
    @include fixed(top 0 left 0);
}



//================================================================================================================
//  *   CH03 - Mixin centered position of an element in a short 2 lines of code
//================================================================================================================
@mixin center($position) {
    @if $position=='vertical' {
        @include absolute(top 50%);
        transform: translateY(-50%);
    } @else if $position=='horizontal' {
        @include absolute(left 50%);
        transform: translate(-50%);
    } @else if $position=='both' {
        @include absolute(top 50% left 50%);
        transform: translate(-50%, -50%);
    }
}

// usage
.my-vertical-box {
    @include center(vertical);
}

.my-horizontal-box {
    @include center(horizontal);
}

.my-all-center-box {
    @include center(both);
}



//================================================================================================================
//  *   CH04 - Mixin converting font size from px to rem
//================================================================================================================
@mixin font-size($size, $base: 16px) {
    font-size: ($size / $base) * 1rem;
}

// usage
.my-font-size {
    @include font-size(16px);
}

.my-font-size-12-10 {
    @include font-size(12px, 10px); // font size is 12px and font base size is 10px
}



//================================================================================================================
//  *   CH05 - Mixin converting line height from px to rem
//================================================================================================================
@mixin line-height($height-value: 12) {
    line-height: (0.09375 * $height-value) + rem;
}

// usega
.my-line-height {
    @include line-height(14);
}



//================================================================================================================
//  *   CH06 - Mixin generates the image in either standard size or retina display version
//================================================================================================================
@mixin img-retina($image, $extension, $width, $height, $position: center, $repeat: no-repeat) {
    background: url($image + '.' + $extension) $repeat $position;
    @media screen and (-webkit-min-device-pixel-ratio: 2),
        screen and (min--moz-device-pixel-ratio: 2),
        screen and (-moz-min-device-pixel-ratio: 2),
        screen and (-o-min-device-pixel-ratio: 2/1),
        screen and (min-device-pixel-ratio: 2),
        screen and (min-resolution: 192dpi),
        screen and (min-resolution: 2dppx) {
            background: url($image + '@2x' + '.' + $extension) $repeat $position;
            background-size: $width $height;
    }
    @media screen and (-webkit-min-device-pixel-ratio: 3),
        screen and (min--moz-device-pixel-ratio: 3),
        screen and (-moz-min-device-pixel-ratio: 3),
        screen and (-o-min-device-pixel-ratio: 3/1),
        screen and (min-device-pixel-ratio: 3),
        screen and (min-resolution: 192dpi),
        screen and (min-resolution: 3dppx) {
            background: url($image + '@3x' + '.' + $extension) $repeat $position;
            background-size: $width $height;
    }
}

// usage
.my-image {
    @include img-retina('../img/waterlily', jpg, 200px, 200px, center, no-repeat);
}



//================================================================================================================
//  *   CH07 - Mixin clearfix
//================================================================================================================
@mixin clearfix {
    &::after {
        content: '';
        display: table;
        clear: both;
    }
}



//================================================================================================================
//  *   CH08 - Mixin CSS triangle
//================================================================================================================
@mixin css-triangle($direction, $color, $height, $width) {
    // Base styles for all triangles
    border-style: solid;
    height: 0;
    width: 0;
    // Cardinal Directions - can't be scalene this way
    @if($direction == 'top') {
        border-color: transparent transparent $color;
        border-width: 0 ($width/2) $height;
    }
    @if ($direction == 'bottom') {
        border-color: $color transparent transparent;
        border-width: $height ($width/2) 0;
    }
    @if ($direction == 'right') {
        border-color: transparent transparent transparent $color;
        border-width: ($height/2) 0 ($height/2) $width;
    }
    @if ($direction == 'left') {
        border-color: transparent $color transparent transparent;
        border-width: ($height/2) $width ($height/2) 0;
    }
    // Ordinal Directions - can be scalene this way!
    @if ($direction == 'top-left') {
        border-color: $color transparent transparent;
        border-width: $height $width 0 0;
    }
    @if ($direction == 'top-right') {
        border-color: transparent $color transparent transparent;
        border-width: 0 $width $height 0;
    }
    @if ($direction == 'bottom-left') {
        border-color: transparent transparent transparent $color;
        border-width: $height 0 0 $width;
    }
    @if ($direction == 'bottom-right') {
        border-color: transparent transparent $color;
        border-width: 0 0 $height $width;
    }
}



//================================================================================================================
//  *   CH09 - Mixin embed video
//================================================================================================================
%embed-video {
    position: relative;
    padding-bottom: 56.25%;
    height: 0;
    overflow: hidden;
    max-width: 100%;

    iframe,
    object,
    embed {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;    
    }
}



//================================================================================================================
//  *   CH10 - Mixin Flex
//================================================================================================================
@mixin flex($direction, $justify-content, $align-items, $flex-wrap) {
    align-items: $align-items;
    display: flex;
    justify-content: $justify-content;
    @if ($direction == 'row') {
        flex-direction: row;
        flex-flow: row;
    }
    @if ($direction == 'column') {
        flex-direction: column;
        flex-flow: column;
    }
    @if ($flex-wrap == 'wrap') {
        flex-wrap: wrap;
    }
    @if ($flex-wrap == 'nowrap') {
        flex-wrap: nowrap;
    }
}



//================================================================================================================
//  *   CH11 - Mixin Spacing
//================================================================================================================
//  Leave this variable alone
$sides: (top, bottom, left, right);

// Adjust this to include the pixel amounts you need.
$spaceamounts: (5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 75, 100);

@each $space in $spaceamounts {
    @each $side in $sides {
        .m-#{str-slice($side, 0, 1)}-#{$space} {
            margin-#{$side}: #{$space}px !important;
        }

        .p-#{str-slice($side, 0, 1)}-#{$space} {
            padding-#{$side}: #{$space}px !important;
        }
    }
}



//================================================================================================================
//  *   CH12 - Mixin Fluid Font Size
//================================================================================================================
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}
  
@mixin fluid-font-size($min-vw, $max-vw, $min-font-size, $max-font-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
            font-size: $min-font-size;
            @media screen and (min-width: $min-vw) {
                font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
            }
            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }
}

// usage
.my-fluid-font-size {
    // Set font range and width of the layout
    $min-width: 320px;
    $max-width: 1200px;
    $min-font: 16px;
    $max-font: 24px;

    @include fluid-font-size($min-width, $max-width, $min-font, $max-font);
}



//================================================================================================================
//  *   CH13 - Mixin Heading
//================================================================================================================
@mixin headings($from: 1, $to: 6) {
    @for $i from $from through $to {
        h#{$i} {
            @content;
        }
    }
}



//================================================================================================================
//  *   CH14 - Mixin Truncate Text
//================================================================================================================
@mixin truncate-text($overflow: ellipsis)   {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: $overflow;
}

// usage
.my-truncate-text-box {
    @include truncate-text();
    width: 300px;
}
